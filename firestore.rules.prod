rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'ADMIN';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isNotBlocked() {
      return !isAuthenticated() || getUserRole() != 'BLOCKED_LOGIN';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId) && isNotBlocked();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin()) && isNotBlocked();
      allow delete: if isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if resource.data.status == 'APPROVED' || 
                     (isAuthenticated() && (isOwner(resource.data.userId) || isAdmin()));
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId) && isNotBlocked();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin()) && isNotBlocked();
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // Roadmaps collection
    match /roadmaps/{roadmapId} {
      allow read: if resource.data.status == 'APPROVED' || 
                     (isAuthenticated() && (isOwner(resource.data.userId) || isAdmin()));
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId) && isNotBlocked();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin()) && isNotBlocked();
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if true; // Comments are public when approved
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId) && isNotBlocked();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin()) && isNotBlocked();
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // Courses collection
    match /courses/{courseId} {
      allow read: if true; // Courses are public
      allow write: if isAdmin();
    }

    // Review summaries collection
    match /reviewSummaries/{summaryId} {
      allow read: if true; // Summaries are public
      allow write: if isAdmin();
    }

    // Audit logs collection
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}